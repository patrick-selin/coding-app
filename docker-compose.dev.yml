# docker-compose.dev.yml
services:
  server:
    container_name: crm-app-server
    environment:
      NODE_ENV: development
    build:
      context: ./server
      dockerfile: Dockerfile.dev
    volumes:
      - ./server:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      # - migrate
      - database-sql
    command: ["npx", "tsx", "watch", "src/index.ts"]
    env_file:
      - server/.env.development

  database-sql:
    container_name: crm-app-postgresql-db
    image: postgres:16.4-bullseye
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - server/.env.development
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U patrick -d postgres"]
      interval: 5s
      timeout: 5s
      retries: 10

  migrate:
    container_name: crm-app-db-migrate
    build:
      context: ./server
      dockerfile: Dockerfile.dev
    command: /bin/sh -c "npm run db:migrate:script:test && npm run db:migrate:script"
    depends_on:
      - database-sql
    environment:
      - NODE_ENV=development
    env_file:
      - server/.env.development

  db-seed:
    image: postgres:16.4-bullseye
    depends_on:
      database-sql:
        condition: service_healthy
      migrate:
        condition: service_started
    volumes:
      - ./server/src/db/seed-db.sql:/seed-db.sql
    env_file:
      - server/.env.development
    command: >
      sh -c "
        export PGPASSWORD=$$POSTGRES_PASSWORD &&
        psql -h database-sql -U $$POSTGRES_USER -d crm_app_db_dev -f /seed-db.sql &&
        psql -h database-sql -U $$POSTGRES_USER -d crm_app_db_test -f /seed-db.sql
      "

  client:
    container_name: crm-app-client
    build:
      context: ./client
      dockerfile: Dockerfile.dev
    volumes:
      - ./client:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      - server
    env_file:
      - client/.env.development

  nginx:
    image: nginx:1.27.1
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.dev.conf:/etc/nginx/nginx.conf:ro
    container_name: reverse-proxy
    restart: always
    depends_on:
      - server
      - client

volumes:
  postgres_data:
