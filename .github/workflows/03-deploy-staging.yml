name: Deploy to Staging

on:
  workflow_run:
    workflows: ["Build and Push Production Docker Images"]
    types:
      - completed

jobs:
  deploy-staging:
    name: Deploy Staging Environment
    # if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'dev' }}
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Debug Branch
        run: echo ${{ github.event.workflow_run.head_branch }}

      - name: Checkout code
        uses: actions/checkout@v4

      # infra ylÃ¶s
      # - name: Set up Terraform
      #   uses: hashicorp/setup-terraform@v3
      #   with:
      #     terraform_version: 1.9.7

      # - name: Initialize Terraform
      #   run: terraform init
      #   working-directory: ./terraform

      # - name: Validate Terraform
      #   run: terraform validate
      #   working-directory: ./terraform

      # - name: Plan Terraform Changes
      #   run: terraform plan
      #   working-directory: ./terraform

      # - name: Apply Terraform
      #   run: echo "Apply..!"

      #
      # paivita serveri

      - name: Extract Image SHAs
        id: extract-sha
        run: |
          echo "SERVER_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/crm-app:server-${{ github.event.workflow_run.outputs.server_image_sha }}" >> $GITHUB_ENV
          echo "FRONTEND_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/crm-app:client-${{ github.event.workflow_run.outputs.client_image_sha }}" >> $GITHUB_ENV

      - name: Debug Image Variables
        run: |
          echo "SERVER_IMAGE=$SERVER_IMAGE"
          echo "FRONTEND_IMAGE=$FRONTEND_IMAGE"

      - name: Create .env File for Staging
        run: |
          echo "SERVER_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/crm-app:server-${{ github.sha }}" > .env
          echo "FRONTEND_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/crm-app:client-${{ github.sha }}" >> .env
          echo "SERVER_PORT=${{ secrets.SERVER_PORT }}" >> .env
          echo "SERVER_HOST=${{ secrets.SERVER_HOST }}" >> .env
          echo "DATABASE_URL_STAG=${{ secrets.DATABASE_URL_STAG }}" >> .env

      - name: Configure SSH ffor EC2 Access
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.AWS_EC2_SSH_PRIVATE_KEY }}

      - name: Add EC2 to Known Hosts
        run: |
          ssh-keyscan -H ${{ secrets.AWS_EC2_PUBLIC_IP }} >> ~/.ssh/known_hosts

      # muista pull changes from repo, branch that has
      - name: Deploy Updated Compose to Staging
        run: |
          ssh ubuntu@${{ secrets.AWS_EC2_PUBLIC_IP }} "
            cd /home/ubuntu/crm-app &&
            git fetch origin &&
            git checkout dev &&
            git reset --hard origin/dev &&
            docker-compose --env-file .env -f docker-compose.stag.yml pull &&
            docker-compose --env-file .env -f docker-compose.stag.yml up --build -d"

      - name: Verify Deployment
        run: |
          ssh ubuntu@${{ secrets.AWS_EC2_PUBLIC_IP }} "docker ps"

      - name: Debug GitHub SHA
        run: |
          echo "GitHub SHA: ${{ github.sha }}"

      - name: Common Setup on Staging Server
        run: |
          ssh ubuntu@${{ secrets.AWS_EC2_PUBLIC_IP }} << 'EOF'
            echo "Switching to project directory..."
            cd /home/ubuntu/crm-app
            pwd

            echo "Loading nvm environment..."
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

            echo "Verifying Node.js and npm versions..."
            node --version
            npm --version
          EOF

      - name: Run Unit Tests on Staging Server
        run: |
          ssh ubuntu@${{ secrets.AWS_EC2_PUBLIC_IP }} << 'EOF'
            echo "Running Unit Tests..."
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

            cd /home/ubuntu/crm-app/server
            echo "Running unit tests in /server..."
            npm install
            npm run test:unit:ci || exit 1

            cd /home/ubuntu/crm-app/client
            echo "Running unit tests in /client..."
            npm install
            npm run test:unit:ci || exit 1

            echo "Unit tests passed successfully!"
          EOF

      - name: Run E2E Tests on Staging Server
        run: |
          ssh ubuntu@${{ secrets.AWS_EC2_PUBLIC_IP }} << 'EOF'
            echo "Running E2E tests..."
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

            cd /home/ubuntu/crm-app
            npm run test:e2e || exit 1

            echo "E2E tests passed successfully!"
          EOF

      - name: Clean Up Docker Resources on EC2
        run: |
          ssh ubuntu@${{ secrets.AWS_EC2_PUBLIC_IP }} << 'EOF'
            echo "Cleaning up Docker resources..."
            docker system prune -af
            echo "Docker cleanup completed!"
            df -h
          EOF

      # # run tests
      # - name: Run Unit Tests on Staging Server
      #   run: |
      #     ssh ubuntu@${{ secrets.AWS_EC2_PUBLIC_IP }} << 'EOF'
      #       echo "Switching to project directory..."
      #       cd /home/ubuntu/crm-app
      #       pwd

      #       echo "Loading nvm environment..."
      #       export NVM_DIR="$HOME/.nvm"
      #       [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

      #       echo "Verifying Node.js and npm versions..."
      #       node --version
      #       npm --version

      #       # Run Unit Tests in /server
      #       echo "Running Unit Tests in /server..."
      #       cd /home/ubuntu/crm-app/server
      #       npm install
      #       npm run test:unit:ci
      #       SERVER_EXIT_CODE=$?

      #       # Run Unit Tests in /client
      #       echo "Running Unit Tests in /client..."
      #       cd /home/ubuntu/crm-app/client
      #       npm install
      #       npm run test:unit:ci
      #       CLIENT_EXIT_CODE=$?

      #       # Check if Unit Tests Failed
      #       if [ $SERVER_EXIT_CODE -ne 0 ] || [ $CLIENT_EXIT_CODE -ne 0 ]; then
      #         echo "Unit tests failed! Exiting with error."
      #         exit 1
      #       else
      #         echo "Unit tests passed successfully!"
      #       fi
      #     EOF

      # - name: Run E2E Tests on Staging Server
      #   run: |
      #     ssh ubuntu@${{ secrets.AWS_EC2_PUBLIC_IP }} << 'EOF'
      #       echo "Switching to project directory..."
      #       cd /home/ubuntu/crm-app
      #       pwd

      #       echo "Loading nvm environment..."
      #       export NVM_DIR="$HOME/.nvm"
      #       [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

      #       echo "Verifying Node.js and npm versions..."
      #       node --version
      #       npm --version

      #       echo "Running E2E tests..."
      #       /home/ubuntu/.nvm/versions/node/v22.12.0/bin/npm run test:e2e
      #       EXIT_CODE=$?

      #       if [ $EXIT_CODE -ne 0 ]; then
      #         echo "E2E tests failed! Exit code: $EXIT_CODE"
      #         exit $EXIT_CODE
      #       else
      #         echo "E2E tests passed successfully!"
      #       fi
      #     EOF

    # if ok, --> deploy to PROD

    # destroy staging? vai stop?
