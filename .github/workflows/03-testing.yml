name: E2E Tests

on:
  workflow_run:
    workflows: ["Build Application"]
    types:
      - completed

jobs:
  setup-docker:
    runs-on: ubuntu-latest

    env:
      NODE_ENV: test
      DATABASE_URL: ${{ secrets.DATABASE_URL }}  # vaihda tama
      POSTGRES_DB: coding-app-db
      SERVER_PORT: 3333
      SERVER_HOST: 0.0.0.0
      VITE_BASE_URL: /api1

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify Docker Image Tags
        run: |
          echo "Expected client Docker image tag: ${{ secrets.DOCKERHUB_USERNAME }}/coding-app:client-${{ github.sha }}"
          echo "Expected server Docker image tag: ${{ secrets.DOCKERHUB_USERNAME }}/coding-app:server-${{ github.sha }}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Pull Docker Images
        run: |
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/coding-app:client-${{ github.sha }}
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/coding-app:server-${{ github.sha }}
          echo "Pulled client image: ${{ secrets.DOCKERHUB_USERNAME }}/coding-app:client-${{ github.sha }}"
          echo "Pulled server image: ${{ secrets.DOCKERHUB_USERNAME }}/coding-app:server-${{ github.sha }}"
        #toimii tahan asti
      - name: Start Application with Docker Compose
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          GITHUB_SHA: ${{ github.sha }}
        run: |
          docker-compose -f docker-compose.test.yml up -d
          echo "Waiting for services to be ready..."
          until curl -s http://localhost:80; do sleep 10; done


#   e2e-tests:
#     if: ${{ github.event.workflow_run.conclusion == 'success' }}
#     runs-on: ubuntu-latest

#     env:
#       NODE_ENV: test
#       DATABASE_URL: ${{ secrets.DATABASE_URL }}  
#       POSTGRES_USER: ${{ secrets.POSTGRES_USER }} 
#       POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
#       POSTGRES_DB: coding-app-db
#       SERVER_PORT: 3335
#       SERVER_HOST: 127.0.0.1
#       VITE_BASE_URL: /api1

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Verify Docker Image Tags
#         run: |
#           echo "Expected client Docker image tag: ${{ secrets.DOCKERHUB_USERNAME }}/coding-app:client-${{ github.sha }}"
#           echo "Expected server Docker image tag: ${{ secrets.DOCKERHUB_USERNAME }}/coding-app:server-${{ github.sha }}"

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: Install Docker Compose
#         run: |
#           sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
#           sudo chmod +x /usr/local/bin/docker-compose

#       - name: Pull Docker Images
#         run: |
#           docker pull ${{ secrets.DOCKERHUB_USERNAME }}/coding-app:client-${{ github.sha }}
#           docker pull ${{ secrets.DOCKERHUB_USERNAME }}/coding-app:server-${{ github.sha }}
#           echo "Pulled client image: ${{ secrets.DOCKERHUB_USERNAME }}/coding-app:client-${{ github.sha }}"
#           echo "Pulled server image: ${{ secrets.DOCKERHUB_USERNAME }}/coding-app:server-${{ github.sha }}"

#       - name: Start Application with Docker Compose
#         env:
#           DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
#           GITHUB_SHA: ${{ github.sha }}
#         run: |
#           docker-compose -f docker-compose.test.yml up -d
#           echo "Waiting for services to be ready..."
#           until curl -s http://localhost:80; do sleep 10; done

#       - name: Capture Docker Compose Logs
#         run: docker-compose -f docker-compose.test.yml logs

#       - name: Check Server Logs
#         run: docker logs coding-app-server

#       - name: Check Client Logs
#         run: docker logs coding-app-client

#       - name: Check Database Logs
#         run: docker logs coding-app-postgresql-db

#       - name: Install dependencies
#         run: npm install
#         working-directory: ./playwright-e2e

#       - name: Install required libraries for Playwright
#         run: |
#           sudo apt-get update
#           sudo apt-get install -y \
#             libwoff1 \
#             libvpx7 \
#             libevent-2.1-7 \
#             libopus0 \
#             gstreamer1.0-libav \
#             gstreamer1.0-plugins-bad \
#             gstreamer1.0-plugins-good \
#             gstreamer1.0-plugins-ugly \
#             gstreamer1.0-pulseaudio \
#             libharfbuzz-icu0 \
#             libhyphen0 \
#             libgles2
#         working-directory: ./playwright-e2e

#       - name: Install Playwright Browsers
#         run: npx playwright install --with-deps
#         working-directory: ./playwright-e2e

#       - name: Run E2E Tests
#         run: npm run test
#         working-directory: ./playwright-e2e

#       - uses: actions/upload-artifact@v4
#         if: always()
#         with:
#           name: playwright-report
#           path: ./playwright-e2e/playwright-report/
#           retention-days: 30

#       - name: Stop and Remove Containers
#         run: |
#           docker-compose -f docker-compose.test.yml down
